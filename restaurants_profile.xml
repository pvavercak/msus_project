<?xml version="1.0" encoding="UTF-8"?>
<document xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://modeler.netgrif.com/petriflow_schema.xsd">
	<id>resto</id>
	<version>1.0.0</version>
	<initials>RST</initials>
	<title>Restaurant</title>
	<defaultRole>true</defaultRole>
	<transitionRole>false</transitionRole>
	<!-- TRANSACTIONS -->
	<!-- ROLES -->
	<role>
		<id>restaurant</id>
		<title>Administrator</title>
	</role>
	<role>
		<id>chef</id>
		<title>Chef</title>
	</role>
	<!-- DATA -->
	<data type="taskRef">
		<id>order_history_taskref</id>
		<title>History Of Orders</title>
		<desc>There are all placed orders</desc>
	</data>
	<data type="taskRef">
		<id>order_history_backup</id>
		<title>Backup of History Of Orders</title>
		<desc>There are all placed orders</desc>
	</data>
	<data type="enumeration_map">
		<id>menu_overview</id>
		<title>Menu</title>
		<desc>Menu overview</desc>
		<options>
        	<option key="Classical slovak dumplings">Meal: Classical slovak dumplings, Price: 5.00</option>
			<option key="Fried cheese">Meal: Fried cheese, Price: 3.80</option>
			<option key="Beef steak with rice and mushroom sausage">Meal: Chicken steak with rice and mushroom sausage, Price: 8.50</option>
			<option key="Grilled Cheeseburger">Meal: Grilled Cheeseburger, Price: 4.80</option>
			<option key="Apple Pie">Meal: Apple Pie, Price: 2.80</option>
			<option key="Chicken Stroganov">Meal: Chicken Stroganov, Price: 6.10</option>
        </options>
	</data>
	<data type="text">
		<id>meal_name</id>
		<title>Meal Name</title>
		<placeholder>Apple Pie</placeholder>
		<desc>Enter a meal name</desc>
	</data>
	<data type="number">
		<id>meal_price</id>
		<title>Meal Price</title>
		<placeholder>3.0</placeholder>
		<desc>Enter a meal price</desc>
	</data>
	<data type="enumeration_map">
		<id>search_by_employee</id>
		<title>Select an employee</title>
		<desc>Selected employee will be displayed</desc>
		<options>
			<option key="defaultFilter">Display all employees</option>
		</options>
		<init></init>
		<action trigger="get">
			searchEmployee: f.search_by_employee,
			groupIdDb: f.db_groupId;

			def allChoices = searchEmployee.options;
			def allOptions = groupIdDb.options;
			
			for (elem in allOptions) {
				def noDotsAsString = elem.getValue() as String;
				def noDots = noDotsAsString.replaceAll(/\./, "_")
				allChoices.put(noDots, noDotsAsString);
			}
			change searchEmployee options {
				return allChoices;
			}
		</action>
		<action trigger="set">
			selectUser: f.search_by_employee,
			orderHistoryTref: f.order_history_taskref,
			orderHistoryBackup: f.order_history_backup,
			groupIdDb: f.db_groupId;

			def selectedUser = selectUser.value as String;
			selectedUser = selectedUser.replaceAll("\\s", "") as String;
			if (!selectedUser.equals("defaultFilter" as String)) {
				for (elem in groupIdDb.options) {
					def compareTo = elem.getValue() as String;
					compareTo = compareTo.replaceAll("\\s", "");
					compareTo = compareTo.replaceAll(/\./, "_") as String;

					if (compareTo.equals(selectedUser as String)) {
						def withoutSpaces = elem.getKey() as String;
						withoutSpaces = withoutSpaces.replaceAll("\\s", "");
						def caseOrder = findCase{it._id.eq(new org.bson.types.ObjectId(withoutSpaces))};
						if (null != caseOrder) {
							def taskOrderHistory = findTask{it.caseId.eq(caseOrder.stringId as String).and(it.transitionId.eq("19"))};
							if (null != taskOrderHistory) {
								change orderHistoryTref value {
									return [taskOrderHistory.stringId];
								}
							}
						}
					}
				}
			}
			else {
				change orderHistoryTref value {
					return orderHistoryBackup.value;
				}
			}
		</action>
	</data>
	<data type="enumeration_map">
		<id>db_groupId</id>
		<title>Database of groupIds</title>
		<desc>Database containing all groupIds of users</desc>
	</data>
	<data type="text">
		<id>add_to_db_groupId</id>
		<title>Add to groupId database</title>
		<desc>On set trigger, this field adds its value into groupId db</desc>
		<action trigger="set">
			newData: f.this,
			groupIdDb : f.db_groupId;

			def groupIds = groupIdDb.options;
			def tokensAsString = newData.value as String;
			def tokens = tokensAsString.split(",");
			
			groupIds.put(tokens[0],tokens[1]);
			
			change groupIdDb options {
				return groupIds;
			}
		</action>
	</data>
	<!-- I18NS -->
	<!-- TRANSITIONS -->
	<transition>
		<id>6</id>
		<x>500</x>
		<y>180</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>All Orders</label>
		<icon>assessment</icon>
		<roleRef>
			<id>restaurant</id>
			<logic>
				<perform>true</perform>
				<view>true</view>
			</logic>
		</roleRef>
		<roleRef>
			<id>chef</id>
			<logic>
				<perform>true</perform>
				<view>true</view>
			</logic>
		</roleRef>
		<dataGroup>
			<id>DataGroup_0</id>
			<dataRef>
				<id>search_by_employee</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>order_history_taskref</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>1</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<event type="assign">
			<id>as11</id>
			<actions phase="post">
				<action>
					orderHistoryTref : f.order_history_taskref,
					orderHistoryBackup: f.order_history_backup,
					selectUser: f.search_by_employee,
					groupIdDb : f.db_groupId;
		
					def allGroupIds = groupIdDb.options;
		
					def uniqueTaskRefs = new LinkedHashMap();

					for (useCaseUniqueId in allGroupIds) {
						def withoutSpaces = useCaseUniqueId.getKey() as String;
						withoutSpaces = withoutSpaces.replaceAll("\\s", "");
						def caseOrder = findCase{it._id.eq(new org.bson.types.ObjectId(withoutSpaces))};
						if (null != caseOrder) {
							def taskOrderHistory = findTask{it.caseId.eq(caseOrder.stringId as String).and(it.transitionId.eq("19"))};
							if (null != taskOrderHistory) {
								uniqueTaskRefs.put(taskOrderHistory.stringId, taskOrderHistory.stringId);
							}
						}
					}

					def isFirstIteration = true;
					if (!uniqueTaskRefs.isEmpty()) {
						for (entry in uniqueTaskRefs) {
							change orderHistoryTref value {
								if (isFirstIteration) {
									isFirstIteration = false;
									return [entry.getValue() as String];
								}
								return orderHistoryTref.value + [entry.getValue() as String];
							}
						}
					}
					change orderHistoryBackup value {
						return orderHistoryTref.value;
					}
				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>8</id>
		<x>380</x>
		<y>340</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Menu</label>
		<icon>menu_book</icon>
		<roleRef>
			<id>restaurant</id>
			<logic>
				<perform>true</perform>
				<view>true</view>
			</logic>
		</roleRef>
		<dataGroup>
			<id>DataGroup_0</id>
			<dataRef>
				<id>menu_overview</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>1</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
	</transition>
	<transition>
		<id>10</id>
		<x>260</x>
		<y>180</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Edit Meal</label>
		<icon>edit</icon>
		<roleRef>
			<id>restaurant</id>
			<logic>
				<perform>true</perform>
				<view>true</view>
			</logic>
		</roleRef>
		<dataGroup>
			<id>DataGroup_0</id>
			<dataRef>
				<id>meal_name</id>
				<logic>
					<behavior>editable</behavior>
					<behavior>required</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>3</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>meal_price</id>
				<logic>
					<behavior>editable</behavior>
					<behavior>required</behavior>
				</logic>
				<layout>
					<x>3</x>
					<y>0</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>menu_overview</id>
				<logic>
					<behavior>editable</behavior>
					<behavior>required</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>1</y>
					<rows>1</rows>
					<cols>4</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<event type="finish">
			<id>2_finish</id>
			<actions phase="pre">
				<action trigger="set">
					name: f.meal_name,
					price: f.meal_price,
					menu: f.menu_overview;

					def oldMenu = menu.options;
					if (oldMenu.containsKey(name.value)) {
						oldMenu.put(name.value,"Meal: " + name.value + " , Price: " + price.value);
					}else{
						oldMenu.remove(menu.value);
						oldMenu.put(name.value,"Meal: " + name.value + " , Price: " + price.value);
					}

					change menu options {
						return oldMenu;
					}
				</action>
			</actions>
		</event>
	</transition>
	<transition>
		<id>11</id>
		<x>380</x>
		<y>60</y>
		<layout>
			<offset>0</offset>
		</layout>
		<label>Add Meal</label>
		<icon>add</icon>
		<roleRef>
			<id>restaurant</id>
			<logic>
				<perform>true</perform>
				<view>true</view>
			</logic>
		</roleRef>
		<dataGroup>
			<id>DataGroup_0</id>
			<dataRef>
				<id>meal_name</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>0</x>
					<y>0</y>
					<rows>1</rows>
					<cols>3</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
			<dataRef>
				<id>meal_price</id>
				<logic>
					<behavior>editable</behavior>
				</logic>
				<layout>
					<x>3</x>
					<y>0</y>
					<rows>1</rows>
					<cols>1</cols>
					<offset>0</offset>
					<template>material</template>
					<appearance>outline</appearance>
				</layout>
			</dataRef>
		</dataGroup>
		<event type="finish">
			<id>1_finish</id>
			<actions phase="pre">
				<action trigger="set">
					name: f.meal_name,
					price: f.meal_price,
					menu: f.menu_overview;

					def oldMenu = menu.options;
					oldMenu.put(name.value, "Meal: " + name.value + " , Price: " + price.value);
					change menu options {
						return oldMenu;
					}
				</action>
			</actions>
		</event>
	</transition>
	<!-- PLACES -->
	<place>
		<id>4</id>
		<x>380</x>
		<y>180</y>
		<label>Restaurants Profile</label>
		<tokens>1</tokens>
		<static>false</static>
	</place>
	<!-- ARCS -->
	<arc>
		<id>7</id>
		<type>read</type>
		<sourceId>4</sourceId>
		<destinationId>6</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>9</id>
		<type>read</type>
		<sourceId>4</sourceId>
		<destinationId>8</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>12</id>
		<type>read</type>
		<sourceId>4</sourceId>
		<destinationId>11</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
	<arc>
		<id>15</id>
		<type>read</type>
		<sourceId>4</sourceId>
		<destinationId>10</destinationId>
		<multiplicity>1</multiplicity>
	</arc>
</document>
